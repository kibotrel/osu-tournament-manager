name: osu-tournament-manager

networks:
  web:
    driver: bridge

services:
  caddy:
    command:
      [
        'caddy',
        'run',
        '--watch',
        '--config',
        '/etc/caddy/Caddyfile',
        '--adapter',
        'caddyfile',
      ]
    container_name: caddy
    env_file:
      - ./.env
    image: caddy:2-alpine
    networks:
      - web
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy:/data/caddy

  client:
    build:
      context: .
      args:
        - APP=apps/client
      dockerfile: Dockerfile
    container_name: client
    depends_on:
      server:
        condition: service_healthy
    networks:
      - web
    ports:
      - ${CLIENT_PORT_SOURCE}:${CLIENT_PORT_TARGET}
    restart: always
    volumes:
      - ./apps/client:/osu-tournanament-manager/apps/client

  postgres:
    container_name: postgres
    env_file:
      - ./apps/server/.env
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready', '-d', 'osu-tournament-manager']
      interval: 250ms
      timeout: 250ms
      retries: 10
    image: postgres:16.2
    networks:
      - web
    ports:
      - ${DATABASE_PORT_SOURCE}:${DATABASE_PORT_TARGET}
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    command:
      [
        'redis-server',
        '--appendonly',
        'yes',
        '--requirepass',
        '${REDIS_PASSWORD}',
      ]
    container_name: redis
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 250ms
      timeout: 250ms
      retries: 10
    image: redis:7.2.5
    networks:
      - web
    ports:
      - ${REDIS_PORT_SOURCE}:${REDIS_PORT_TARGET}
    restart: always
    volumes:
      - redis:/data

  server:
    build:
      context: .
      args:
        - APP=apps/server
      dockerfile: Dockerfile
    container_name: server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      spec-builder:
        condition: service_started
    healthcheck:
      test: ['CMD', 'pnpm', 'healthcheck']
      interval: 250ms
      timeout: 500ms
      retries: 10
    networks:
      - web
    ports:
      - ${SERVER_PORT_SOURCE}:${SERVER_PORT_TARGET}
    restart: always
    volumes:
      - ./apps/server:/osu-tournanament-manager/apps/server

  spec-builder:
    command: [run, dev:specs]
    container_name: spec-builder
    build:
      context: .
      args:
        - APP=apps/server
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./apps/server:/osu-tournanament-manager/apps/server

version: '3.9'

volumes:
  caddy:
  postgres:
  redis:
