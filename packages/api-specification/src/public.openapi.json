{
  "openapi": "3.0.0",
  "info": {
    "license": {
      "name": "GNU General Public License v3.0",
      "url": "https://github.com/kibotrel/osu-tournament-manager/blob/main/LICENSE"
    },
    "title": "osu! tournament manager API",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://{environment}.osu-tournament-manager.app/api/{version}",
      "variables": {
        "environment": {
          "default": "dev",
          "enum": [
            "dev",
            "production",
            "staging"
          ]
        },
        "version": {
          "default": "v1",
          "enum": [
            "v1"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User session management.\n"
    },
    {
      "name": "Matches",
      "description": "Match management and related operations.\n"
    },
    {
      "name": "Public",
      "description": "Publicly available resources, no authentication required.\n"
    }
  ],
  "paths": {
    "/authentication/login": {
      "post": {
        "description": "This is where all osu! OAuth successful authentication requests are redirected to.\nIt creates a session to keep user logged-in for subsequent requests\nand a token to interact with osu! API. <b>This endpoint shouldn't be used directly.</b>\n",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "authenticationCode": {
                    "type": "string"
                  }
                },
                "required": [
                  "authenticationCode"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatarUrl": {
                      "example": "https://a.ppy.sh/3909293?1555203556.jpeg",
                      "type": "string"
                    },
                    "gameUserId": {
                      "example": 3909293,
                      "type": "integer"
                    },
                    "name": {
                      "example": "DemonWaves",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "New session created, user already exists in database."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatarUrl": {
                      "example": "https://a.ppy.sh/3909293?1555203556.jpeg",
                      "type": "string"
                    },
                    "gameUserId": {
                      "example": 3909293,
                      "type": "integer"
                    },
                    "name": {
                      "example": "DemonWaves",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "New session created and user added to database."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "instance": {
                      "example": "/api/v1/authentication/login",
                      "type": "string"
                    },
                    "status": {
                      "example": 400,
                      "type": "integer"
                    },
                    "title": {
                      "example": "Bad Request",
                      "type": "string"
                    },
                    "detail": {
                      "example": "Input validation failed",
                      "type": "string"
                    },
                    "errors": {
                      "items": {
                        "properties": {
                          "path": {
                            "example": "/body/authenticationCode",
                            "type": "string"
                          },
                          "message": {
                            "example": "authenticationCode cannot be empty",
                            "type": "string"
                          },
                          "errorCode": {
                            "example": "validator.loginBodyValidator.authenticationCode.empty",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Missing or invalid authentication code."
          }
        },
        "security": [],
        "summary": "Authentication callback from osu!",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/authentication/logout": {
      "post": {
        "description": "This endpoint destroy any session associated with the request and effectively\nlogs out the user.\n",
        "operationId": "logout",
        "responses": {
          "204": {
            "description": "Any session associated with the request has been destroyed."
          }
        },
        "security": [],
        "summary": "Destroy session and log out.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/matches": {
      "post": {
        "description": "Creates a new match. This will ask bancho to create a new multiplayer channel\nand return the channel details for later use.\n",
        "operationId": "createMatch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatarUrl": {
                      "example": "https://a.ppy.sh/3909293?1555203556.jpeg",
                      "type": "string"
                    },
                    "gameUserId": {
                      "example": 3909293,
                      "type": "integer"
                    },
                    "name": {
                      "example": "DemonWaves",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "New match created and channel opened on bancho."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "instance": {
                      "example": "/api/v1/matches",
                      "type": "string"
                    },
                    "status": {
                      "example": 400,
                      "type": "integer"
                    },
                    "title": {
                      "example": "Bad Request",
                      "type": "string"
                    },
                    "detail": {
                      "example": "Input validation failed",
                      "type": "string"
                    },
                    "errors": {
                      "items": {
                        "properties": {
                          "path": {
                            "example": "/body/name",
                            "type": "string"
                          },
                          "message": {
                            "example": "name cannot be empty",
                            "type": "string"
                          },
                          "errorCode": {
                            "example": "validator.createMatchBodyValidator.name.empty",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Missing or invalid name."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "instance": {
                      "example": "/api/v1/matches",
                      "type": "string"
                    },
                    "status": {
                      "example": 401,
                      "type": "integer"
                    },
                    "title": {
                      "example": "Unauthorized",
                      "type": "string"
                    },
                    "detail": {
                      "example": "You must be authenticated to access this resource.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Missing or invalid authentication."
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Create a new match.",
        "tags": [
          "Matches"
        ]
      }
    },
    "/matches/{id}": {
      "get": {
        "description": "Get an existing match by its ID.\n",
        "operationId": "getMatch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID of the match to get."
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "endsAt": {
                      "example": "2024-12-31T23:59:59.000Z",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "id": {
                      "example": 1,
                      "type": "number"
                    },
                    "name": {
                      "example": "MWC4K2025 RO32: Philippines VS France",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Match and bancho channel closed."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "instance": {
                      "example": "/api/v1/matches/1",
                      "type": "string"
                    },
                    "status": {
                      "example": 400,
                      "type": "integer"
                    },
                    "title": {
                      "example": "Bad Request",
                      "type": "string"
                    },
                    "detail": {
                      "example": "Input validation failed",
                      "type": "string"
                    },
                    "errors": {
                      "items": {
                        "properties": {
                          "path": {
                            "example": "/params/id",
                            "type": "string"
                          },
                          "message": {
                            "example": "id cannot be empty",
                            "type": "string"
                          },
                          "errorCode": {
                            "example": "validator.getMatchParametersValidator.id.empty",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Missing or invalid id."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "instance": {
                      "example": "/api/v1/matches/1",
                      "type": "string"
                    },
                    "status": {
                      "example": 401,
                      "type": "integer"
                    },
                    "title": {
                      "example": "Unauthorized",
                      "type": "string"
                    },
                    "detail": {
                      "example": "You must be authenticated to access this resource.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Missing or invalid authentication."
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Get an existing match.",
        "tags": [
          "Matches"
        ]
      }
    },
    "/matches/{id}/close": {
      "post": {
        "description": "Closes an existing match. This will also ask bancho to close the multiplayer channel\nassociated with it.\n",
        "operationId": "closeMatch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID of the match to close."
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "example": "closed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Match and bancho channel closed."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "instance": {
                      "example": "/api/v1/matches/1/close",
                      "type": "string"
                    },
                    "status": {
                      "example": 400,
                      "type": "integer"
                    },
                    "title": {
                      "example": "Bad Request",
                      "type": "string"
                    },
                    "detail": {
                      "example": "Input validation failed",
                      "type": "string"
                    },
                    "errors": {
                      "items": {
                        "properties": {
                          "path": {
                            "example": "/params/id",
                            "type": "string"
                          },
                          "message": {
                            "example": "id cannot be empty",
                            "type": "string"
                          },
                          "errorCode": {
                            "example": "validator.closeMatchParametersValidator.id.empty",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Missing or invalid id."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "instance": {
                      "example": "/api/v1/matches/1/close",
                      "type": "string"
                    },
                    "status": {
                      "example": 401,
                      "type": "integer"
                    },
                    "title": {
                      "example": "Unauthorized",
                      "type": "string"
                    },
                    "detail": {
                      "example": "You must be authenticated to access this resource.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Missing or invalid authentication."
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Close an existing match.",
        "tags": [
          "Matches"
        ]
      }
    },
    "/public/health": {
      "get": {
        "description": "This allows to check if the server is up and running.\nHelpful if you want to check API status before making any request.\n",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "content": {
              "plain/text": {
                "schema": {
                  "example": "OK",
                  "type": "string"
                }
              }
            },
            "description": "For now, it only tells that the API is up and running."
          }
        },
        "security": [],
        "summary": "Check server systems status.",
        "tags": [
          "Public"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "cookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionId"
      }
    }
  }
}